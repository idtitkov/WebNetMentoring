// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Api.Tests.Swagger
{
    /// <summary> The Api service client. </summary>
    public partial class ApiClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ApiClient. </summary>
        public ApiClient() : this(new Uri(""), new ApiClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ApiClient. </summary>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ApiClient(Uri endpoint, ApiClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new ApiClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfCategoryViewModel</c>:
        /// <code>{
        ///   categoryId: number, # Optional.
        ///   categoryName: string, # Required.
        ///   description: string, # Required.
        ///   picture: CategoryViewModelPicture, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetCategoriesAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.GetCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCategoriesRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfCategoryViewModel</c>:
        /// <code>{
        ///   categoryId: number, # Optional.
        ///   categoryName: string, # Required.
        ///   description: string, # Required.
        ///   picture: CategoryViewModelPicture, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetCategories(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.GetCategories");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCategoriesRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetImageAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.GetImage");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetImageRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetImage(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.GetImage");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetImageRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UpdateImageAsync(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.UpdateImage");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateImageRequest(id, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response UpdateImage(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.UpdateImage");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateImageRequest(id, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfProductViewModel</c>:
        /// <code>{
        ///   productId: number, # Optional.
        ///   productName: string, # Required.
        ///   quantityPerUnit: string, # Required.
        ///   unitPrice: number, # Required.
        ///   categoryId: number, # Required.
        ///   supplierId: number, # Required.
        ///   discontinued: boolean, # Required.
        ///   categoryName: string, # Optional.
        ///   supplierName: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetProductsAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.GetProducts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProductsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfProductViewModel</c>:
        /// <code>{
        ///   productId: number, # Optional.
        ///   productName: string, # Required.
        ///   quantityPerUnit: string, # Required.
        ///   unitPrice: number, # Required.
        ///   categoryId: number, # Required.
        ///   supplierId: number, # Required.
        ///   discontinued: boolean, # Required.
        ///   categoryName: string, # Optional.
        ///   supplierName: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetProducts(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.GetProducts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProductsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ProductViewModel</c>:
        /// <code>{
        ///   productId: number, # Optional.
        ///   productName: string, # Required.
        ///   quantityPerUnit: string, # Required.
        ///   unitPrice: number, # Required.
        ///   categoryId: number, # Required.
        ///   supplierId: number, # Required.
        ///   discontinued: boolean, # Required.
        ///   categoryName: string, # Optional.
        ///   supplierName: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ProductViewModel</c>:
        /// <code>{
        ///   productId: number, # Optional.
        ///   productName: string, # Required.
        ///   quantityPerUnit: string, # Required.
        ///   unitPrice: number, # Required.
        ///   categoryId: number, # Required.
        ///   supplierId: number, # Required.
        ///   discontinued: boolean, # Required.
        ///   categoryName: string, # Optional.
        ///   supplierName: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateProductAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.CreateProduct");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateProductRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ProductViewModel</c>:
        /// <code>{
        ///   productId: number, # Optional.
        ///   productName: string, # Required.
        ///   quantityPerUnit: string, # Required.
        ///   unitPrice: number, # Required.
        ///   categoryId: number, # Required.
        ///   supplierId: number, # Required.
        ///   discontinued: boolean, # Required.
        ///   categoryName: string, # Optional.
        ///   supplierName: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ProductViewModel</c>:
        /// <code>{
        ///   productId: number, # Optional.
        ///   productName: string, # Required.
        ///   quantityPerUnit: string, # Required.
        ///   unitPrice: number, # Required.
        ///   categoryId: number, # Required.
        ///   supplierId: number, # Required.
        ///   discontinued: boolean, # Required.
        ///   categoryName: string, # Optional.
        ///   supplierName: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateProduct(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.CreateProduct");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateProductRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetProductAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.GetProduct");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProductRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetProduct(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.GetProduct");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetProductRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ProductViewModel</c>:
        /// <code>{
        ///   productId: number, # Optional.
        ///   productName: string, # Required.
        ///   quantityPerUnit: string, # Required.
        ///   unitPrice: number, # Required.
        ///   categoryId: number, # Required.
        ///   supplierId: number, # Required.
        ///   discontinued: boolean, # Required.
        ///   categoryName: string, # Optional.
        ///   supplierName: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateProductAsync(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.UpdateProduct");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateProductRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ProductViewModel</c>:
        /// <code>{
        ///   productId: number, # Optional.
        ///   productName: string, # Required.
        ///   quantityPerUnit: string, # Required.
        ///   unitPrice: number, # Required.
        ///   categoryId: number, # Required.
        ///   supplierId: number, # Required.
        ///   discontinued: boolean, # Required.
        ///   categoryName: string, # Optional.
        ///   supplierName: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateProduct(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.UpdateProduct");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateProductRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteProductAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.DeleteProduct");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProductRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteProduct(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ApiClient.DeleteProduct");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteProductRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetCategoriesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200400);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Categories", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreateGetImageRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200404);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Categories/image/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreateUpdateImageRequest(int id, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201400);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Categories/image/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetProductsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200400);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Products", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreateCreateProductRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201400);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Products", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetProductRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200404);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Products/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreateUpdateProductRequest(int id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200400);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Products/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteProductRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200404);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/Products/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200400;
        private static ResponseClassifier ResponseClassifier200400 => _responseClassifier200400 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 400 });
        private static ResponseClassifier _responseClassifier200404;
        private static ResponseClassifier ResponseClassifier200404 => _responseClassifier200404 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 404 });
        private static ResponseClassifier _responseClassifier201400;
        private static ResponseClassifier ResponseClassifier201400 => _responseClassifier201400 ??= new StatusCodeClassifier(stackalloc ushort[] { 201, 400 });
    }
}
